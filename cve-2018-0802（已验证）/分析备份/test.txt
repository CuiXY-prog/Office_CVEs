# 漏洞溯源
	-poc 会弹出计算器, 根据 cve-2017-11882 的分析, 从 EqnEdt32+1160F 函数切入, 看看是否断下。 结果在 EqnEdt32+1160F 运行第二次后计算器弹出, 调用栈如下
		00 00dcea78 00bc15d8     00dcebfc 00000000 00dcea98 EqnEdt32!EqnFrameWinProc+0x2b2f
		01 00dceabc 00bd18e4     00dcebfc 00dcee2c 00dcf06c EqnEdt32!EqnFrameWinProc+0x2af8
		02 00dcebd8 00beb463     00dcebfc 75580001 00dcee2c EqnEdt32!FMDFontListEnum+0x650
		03 00dcec94 74545171     cef15d5a 00dcee2c 00dcf06c EqnEdt32!MFEnumFunc+0xcc66
		04 00dcecbc 74545171     cef15d62 00dcee2c 00dcf06c KERNEL32!GlobalUnlock+0xb1
		05 00dcecf4 00bc775e     02ec00b4 00dced18 00bea8a0 KERNEL32!GlobalUnlock+0xb1
		06 00dced00 00bea8a0     00dcee2c 00dcf06c 754b1f4e EqnEdt32!EqnFrameWinProc+0x8c7e
		07 00dced18 00bea72f     00000008 00dcee2c 00dcf06c EqnEdt32!MFEnumFunc+0xc0a3
		08 00dced30 00be75da     00000008 00dced84 00dcee2c EqnEdt32!MFEnumFunc+0xbf32
		09 00dced94 00bdf926     00dcedac 00dcee2c 00dcf06c EqnEdt32!MFEnumFunc+0x8ddd
		0a 00dcedc4 00bb6a98     02ec00b4 00dcee2c 00dcf06c EqnEdt32!MFEnumFunc+0x1129
		0b 00dcee28 75192244     01236348 055c0308 00000202 EqnEdt32!AboutMathType+0x5a98
		0c 00dcee44 75154f9b     00bb6881 00dcf070 00000002 RPCRT4!NdrNsSendReceive+0x254
		0d 00dcf288 754a3349     01249d38 01209c40 0121b2c4 RPCRT4!NdrStubCall2+0x30b
		0e 00dcf2d4 75534bb6     01249d38 0121b2c4 01209c40 combase!CStdStubBuffer_Invoke+0x99
		0f 00dcf328 75534f1f     01249d38 0121b2c4 01209c40 combase!PropVariantClear+0xe3f6
		10 00dcf44c 7553b568     01209c40 01249d38 00dcf628 combase!PropVariantClear+0xe75f
		11 00dcf5d4 75531840     0121b2c4 01249d38 01209c40 combase!PropVariantClear+0x14da8
		12 00dcf6bc 75539b1e     01249d38 01236348 012072a0 combase!PropVariantClear+0xb080
		13 00dcfa7c 755325b9     00dcfa97 011f7970 0000babe combase!PropVariantClear+0x1335e
		14 00dcfb50 74fbd273     008a1974 00000400 0000babe combase!PropVariantClear+0xbdf9
		15 00dcfb7c 74f9e84a     755321c0 008a1974 00000400 USER32!SetManipulationInputTarget+0x53
		16 00dcfc64 74f9e1a4     755321c0 00000000 00000400 USER32!DispatchMessageW+0x8fa
		17 00dcfcd8 74f9df60     00fd0800 00dcfcfc 00bd61b5 USER32!DispatchMessageW+0x254
		18 00dcfce4 00bd61b5     00dcfd14 00bfcd40 011e3830 USER32!DispatchMessageW+0x10
		19 00dcfcfc 00bbe5bf     00dcfd14 00bfcd40 011e3830 EqnEdt32!FMDFontProtoEnum+0x429d
		1a 00dcfd30 00bfce8b     00bb0000 00000000 011e3830 EqnEdt32!MtInsituWndProc+0x5851
		1b 00dcfdc4 745462c4     00fcf000 745462a0 cef14c4e EqnEdt32!FltToolbarWinProc+0x2d24
		1c 00dcfdd8 779b0609     00fcf000 cd0910d9 00000000 KERNEL32!BaseThreadInitThunk+0x24
		1d 00dcfe20 779b05d4     ffffffff 779d254d 00000000 ntdll!__RtlUserThreadStart+0x2f
		1e 00dcfe30 00000000     00bfcd40 00fcf000 00000000 ntdll!_RtlUserThreadStart+0x1b

	- 分析后发现在 EqnEdt32+3b45e 函数调用后会弹出计算器, 下面开始分析 EqnEdt32+3b45e 函数调用, 最终调用栈如下所示, 最终第二次调用 EqnEdt32+214dd 时弹出计算器
		EqnEdt32+3b45e			// 调用 1 次
			EqnEdt32+214dd			// 调用 2 次
			-> EqnEdt32+217c3: call EqnEdt32!FMDFontListEnum+0xba5
				EqnEdt32+21E39
				-> EqnEdt32+21e65: rep movs byte ptr es:[edi],byte ptr [esi]
